-- =========================================
-- üî• AOT:R FULL SCRIPT BY GPT (WAIT 4s REFILL + FIXED RETRY)
-- =========================================

-- ‚ö° Safe wait LocalPlayer + PlayerScripts + PlayerModule
local Players = game:GetService("Players")
local LocalPlayer = nil
repeat task.wait(0.1) LocalPlayer = Players.LocalPlayer until LocalPlayer

local playerScripts = nil
repeat task.wait(0.1) playerScripts = LocalPlayer:FindFirstChild("PlayerScripts") until playerScripts

local playerModule = nil
repeat task.wait(0.1) playerModule = playerScripts:FindFirstChild("PlayerModule") until playerModule
require(playerModule)

-- üõ°Ô∏è Universal Bypass Detect
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local POST = ReplicatedStorage.Assets.Remotes.POST
local GET = ReplicatedStorage.Assets.Remotes.GET
local oldNameCall
oldNameCall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = {...}
    if (method == "FireServer" or method == "InvokeServer") then
        if tostring(self) == "POST" and args[1] == "Functions" and args[2] == "Detect" then
            return
        end
    end
    return oldNameCall(self, unpack(args))
end)

-- ============================
-- üè† Lobby: Auto Select Slot + Teleport
-- ============================
local placeId = game.PlaceId
if placeId == 13379208636 then
    print("[System] Selecting slot and teleporting to Lobby...")
    task.wait(5)
    pcall(function()
        GET:InvokeServer("Functions", "Select", "A")
        task.wait(1)
        GET:InvokeServer("Functions", "Teleport", "Lobby")
    end)
end

-- ============================
-- üè¢ Menu: Auto Upgrade + Mission
-- ============================
if placeId == 14916516914 then
    print("[System] Starting auto upgrade and mission setup...")
    task.wait(7)

    local priorityUpgrades = { "ODM_Damage", "Blade_Durability" }
    local secondaryUpgrades = { "ODM_Speed", "ODM_Gas", "ODM_Range", "ODM_Control", "Crit_Chance", "Crit_Damage" }
    local keepUpgrading = true

    local function tryUpgrade(statKey)
        local success, result = pcall(function()
            return GET:InvokeServer("S_Equipment", "Upgrade", statKey)
        end)
        if success and result then
            print("[Upgrade] Upgraded:", statKey)
            return true
        else
            print("[Upgrade] Failed:", statKey)
            return false
        end
    end

    while keepUpgrading do
        local didUpgrade = false
        for _, stat in ipairs(priorityUpgrades) do
            if tryUpgrade(stat) then
                didUpgrade = true
                task.wait(math.random(20,40)/100)
            end
        end
        for _, stat in ipairs(secondaryUpgrades) do
            if tryUpgrade(stat) then
                didUpgrade = true
                task.wait(math.random(20,40)/100)
            end
        end
        if not didUpgrade then
            keepUpgrading = false
            print("[Upgrade] All upgrades complete.")
        end
    end

    -- Create Mission
    local difficulties = {"Aberrant", "Severe", "Hard", "Normal", "Easy"}
    local createdMission = false
    for _, diff in ipairs(difficulties) do
        task.wait(0.1)
        local success, result = pcall(function()
            return GET:InvokeServer("S_Missions", "Create", {
                Difficulty = diff, Type = "Missions", Name = "Shiganshina", Objective = "Skirmish"
            })
        end)
        if success and result then
            createdMission = true
            print("[Mission] Created on:", diff)
            for _, mod in ipairs({"No Skills","No Talents","Nightmare","Oddball","Glass Cannon","Time Trial","Injury Prone","Chronic Injuries","Fog"}) do
                pcall(function()
                    GET:InvokeServer("S_Missions", "Modify", mod)
                end)
                task.wait(0.1)
            end
            print("[Mission] Starting mission...")
            task.wait(0.5)
            pcall(function()
                GET:InvokeServer("S_Missions", "Start")
            end)
            break
        end
    end
    if not createdMission then print("[Mission] Could not create mission.") end
end

-- ============================
-- ‚öîÔ∏è Mission: AutoFarm + Retry + Blade System
-- ============================
if placeId ~= 13379208636 and placeId ~= 14916516914 then
    print("[System] Starting AutoFarm...")

    local Workspace = game:GetService("Workspace")
    local RunService = game:GetService("RunService")
    local farmEnabled, hoverY, retryCount, firstFarmDone = true, nil, 0, false
    local canAttack = true
    local titanFolder = nil
    repeat titanFolder = Workspace:FindFirstChild("Titans") task.wait(0.1) until titanFolder

    -- No Collide + Hover Lock
    RunService.Stepped:Connect(function()
        local char = LocalPlayer.Character
        if char then
            for _, p in ipairs(char:GetDescendants()) do
                if p:IsA("BasePart") then p.CanCollide = false end
            end
        end
    end)
    RunService.Heartbeat:Connect(function()
        local char = LocalPlayer.Character
        if char and char:FindFirstChild("HumanoidRootPart") and hoverY then
            local hrp = char.HumanoidRootPart
            hrp.Velocity = Vector3.new(0,0,0)
            hrp.CFrame = CFrame.new(hrp.Position.X, hoverY, hrp.Position.Z)
        end
    end)

    -- Count all blades (14)
    local function countAllBlades()
        local char = LocalPlayer.Character
        if not char then return 0 end
        local rig = char:FindFirstChild("Rig_" .. LocalPlayer.Name)
        if not rig then return 0 end
        local count = 0
        for _, hand in {"LeftHand", "RightHand"} do
            local h = rig:FindFirstChild(hand)
            if h then
                for i=1,7 do
                    local blade = h:FindFirstChild("Blade_"..i)
                    if blade and not blade:GetAttribute("Broken") then count += 1 end
                end
            end
        end
        return count
    end

    -- Retry improved (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ã‡πâ‡∏≥ + wait ‡πÄ‡∏û‡∏¥‡πà‡∏°)
    task.spawn(function()
        while task.wait(0.1) do
            if firstFarmDone and noTitansAlive() then
                if retryCount == 0 then
                    task.wait(0.3)
                    pcall(function()
                        GET:InvokeServer("Functions", "Retry", "Add")
                    end)
                    retryCount = 1
                    print("[System] Retried after clearing titans.")
                else
                    retryCount = 0
                end
            end
        end
    end)

    -- Blade + Refill (reload ~1.2s, refill ~2s, wait 4s)
    local isReloading, reloadCount, maxReloadBeforeRefill = false, 0, 3
    local refillTank = Workspace.Unclimbable.Reloads.GasTanks:FindFirstChild("Refill")
    task.spawn(function()
        while task.wait(0.1) do
            local bladesLeft = countAllBlades()
            if bladesLeft < 1 and not isReloading then
                canAttack = false
                isReloading = true
                if reloadCount < maxReloadBeforeRefill then
                    print("[Blade] Sending Drop + Reload Remote ("..(reloadCount+1).."/"..maxReloadBeforeRefill..")")
                    pcall(function()
                        GET:InvokeServer("Blades", "Drop")
                        task.wait(0.1)
                        print("[Blade] Sending Reload Remote")
                        GET:InvokeServer("Blades", "Reload")
                    end)
                    reloadCount += 1
                    local t = tick()
                    repeat 
                        task.wait(0.1)
                        bladesLeft = countAllBlades()
                        print("[Blade Count = "..bladesLeft.."]")
                    until bladesLeft >= 3 or tick()-t > 1.2
                else
                    print("[Blade] Sending Full Refill Remote at Station")
                    pcall(function()
                        POST:FireServer("Attacks", "Reload", refillTank)
                    end)
                    reloadCount = 0
                    local t = tick()
                    repeat 
                        task.wait(0.1)
                        bladesLeft = countAllBlades()
                        print("[Blade Count = "..bladesLeft.."]")
                    until bladesLeft >= 6 or tick()-t > 2
                    print("[Blade] Wait 4 sec after Refill for safety...")
                    task.wait(4)
                end
                isReloading = false
                canAttack = true
            end
        end
    end)

    -- Main Farm Loop
    task.spawn(function()
        while task.wait(0.1) do
            if not farmEnabled or not canAttack then continue end
            local char = LocalPlayer.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            if not hrp then continue end

            local nearest, minDist = nil, math.huge
            for _, titan in ipairs(titanFolder:GetChildren()) do
                if titan:GetAttribute("Dead") then continue end
                local humanoid = titan:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.Health <= 0 then continue end
                local pos = titan:FindFirstChild("HumanoidRootPart") or titan:FindFirstChild("Torso") or titan:FindFirstChild("Head")
                if pos then
                    local dist = (hrp.Position - pos.Position).Magnitude
                    if dist < minDist then nearest, minDist = titan, dist end
                end
            end

            if nearest then
                firstFarmDone = true
                local target = nearest:FindFirstChild("Hitboxes") and (
                    nearest.Hitboxes:FindFirstChild("Hit") and nearest.Hitboxes.Hit:FindFirstChild("Nape") or
                    nearest.Hitboxes:FindFirstChild("Fake") or nearest:FindFirstChild("Fake_Head"))
                if not target then
                    for _, part in ipairs(nearest:GetDescendants()) do
                        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then target = part break end
                    end
                end
                if target then
                    local safeY = target.Position.Y + 300
                    hrp.CFrame = CFrame.new(target.Position.X, safeY, target.Position.Z)
                    hoverY = safeY
                    local dmg = math.random(1000,10000)
                    pcall(function()
                        POST:FireServer("Hitboxes", "Register", target, dmg, 0.1)
                        POST:FireServer("Attacks", "Slash", true)
                        POST:FireServer("Attacks", "Slash", false)
                    end)
                end
            else
                hoverY = nil
            end
        end
    end)
end
